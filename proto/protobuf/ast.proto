syntax = "proto3";

package inc.common.proto;

message Symbols {
  repeated string symbols = 1;
}

message Import {
  repeated string pkg = 1;
  string name = 2;
  Symbols symbols = 3;
}

message Atomic {}

message Parameterized {
  repeated Kind params = 1;
  Kind result = 2;
}

message KindVariable {
  int32 id = 1;
}

message Kind {
  oneof sealed_value {
    Atomic atomic = 1;
    Parameterized parameterized = 2;
    KindVariable kindVar = 3;
  }
}

message NamedTypeVariable {
  string name = 1;
  Kind kind = 2;
}

message InferredTypeVariable {
  int32 id = 1;
  Kind kind = 2;
}

message TypeConstructor {
  string name = 1;
  Kind kind = 2;
}

message TypeApply {
  Type typ = 1;
  repeated Type params = 2;
  Kind kind = 3;
}

message TypeVariable {
  oneof tyVar {
    NamedTypeVariable named = 1;
    InferredTypeVariable inferred = 2;
  }
}

message Type {
  oneof sealed_value {
    TypeVariable tyVar = 1;
    TypeConstructor tyCon = 2;
    TypeApply tyApp = 3;
  }
}

message TypeScheme {
  repeated TypeVariable bound = 1;
  Type type = 2;
}

message NoName {}

message LocalName {
  string name = 1;
}

message ModuleName {
  repeated string pkg = 1;
  string mod = 2;
}

message MemberName {
  repeated string pkg = 1;
  string mod = 2;
  string name = 3;
}

message ConstrName {
  repeated string pkg = 1;
  string mod = 2;
  string data = 3;
  string name = 4;
}

message Name {
  oneof sealed_value {
    NoName noName = 1;
    LocalName localName = 2;
    ModuleName moduleName = 3;
    MemberName memberName = 4;
    ConstrName constrName = 5;
  }
}

message NameWithType {
  Name name = 1;
  TypeScheme type = 2;
}

message Reference {
  string name = 1;
  NameWithType nameWithType = 2;
}

message LiteralInt {
  int32 int = 1;
  NameWithType nameWithType = 2;
}

message LiteralLong {
  int64 long = 1;
  NameWithType nameWithType = 2;
}

message LiteralFloat {
  float flt = 1;
  NameWithType nameWithType = 2;
}

message LiteralDouble {
  double flt = 1;
  NameWithType nameWithType = 2;
}

message LiteralBoolean {
  bool boolean = 1;
  NameWithType nameWithType = 2;
}

message LiteralString {
  string str = 1;
  NameWithType nameWithType = 2;
}

message LiteralChar {
  string char = 1;
  NameWithType nameWithType = 2;
}

message LiteralUnit {
  NameWithType nameWithType = 1;
}

message If {
  Expr cond = 1;
  Expr thenExpr = 2;
  Expr elseExpr = 3;
  NameWithType nameWithType = 4;
}

message Param {
  string name = 1;
  TypeScheme ascribedAs = 2;
  NameWithType nameWithType = 3;
}

message Lambda {
  repeated Param params = 1;
  Expr body = 2;
  NameWithType nameWithType = 3;
}

message Apply {
  Expr fn = 1;
  repeated Expr args = 2;
  NameWithType nameWithType = 3;
}

message Ascription {
  Expr expr = 1;
  TypeScheme ascribedAs = 2;
  NameWithType nameWithType = 3;
}

message Expr {
  oneof sealed_value {
    Reference ref = 1;
    LiteralInt int = 2;
    LiteralLong long = 3;
    LiteralFloat flt = 4;
    LiteralDouble dbl = 5; 
    LiteralBoolean boolean = 6;
    LiteralString str = 7;
    LiteralChar char = 8;
    LiteralUnit unit = 9;
    If if = 10;
    Lambda lambda = 11;
    Apply apply = 12;
    Ascription ascription = 13;
  }
}

message Let {
  string name = 1;
  Expr binding = 2;
  NameWithType nameWithType = 3;
}

message DataConstructor {
  string name = 1;
  repeated Param params = 2;
  TypeScheme returnType = 3;
  NameWithType nameWithType = 4;
}

message Data {
  string name = 1;
  repeated TypeVariable typeParams = 2;
  repeated DataConstructor cases = 3;
  NameWithType nameWithType = 4;
}

message TopLevelDeclaration {
  oneof sealed_value {
    Let let = 1;
    Data data = 2;
  }
}

message Module {
  repeated string pkg = 1;
  string name = 2;
  repeated Import imports = 3;
  repeated TopLevelDeclaration declarations = 4;
  NameWithType nameWithType = 5;
}