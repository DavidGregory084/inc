syntax = "proto3";

package inc.common.proto;

message Symbols {
  repeated string symbols = 1;
}

message Import {
  repeated string pkg = 1;
  string name = 2;
  Symbols symbols = 3;
}

message TypeVariable {
  int32 id = 1;
}

message TypeConstructor {
  string name = 1;
  repeated Type typeParams = 2;
}

message Type {
  oneof sealed_value {
    TypeVariable tyVar = 1;
    TypeConstructor tyCon = 2;
  }
}

message TypeScheme {
  repeated TypeVariable bound = 1;
  Type type = 2;
}

message NoName {}

message LocalName {
  string name = 1;
}

message ModuleName {
  repeated string pkg = 1;
  string cls = 2;
}

message MemberName {
  repeated string pkg = 1;
  string cls = 2;
  string name = 3;
}

message Name {
  oneof sealed_value {
    NoName noName = 1;
    LocalName localName = 2;
    ModuleName moduleName = 3;
    MemberName memberName = 4;
  }
}

message NameWithType {
  Name name = 1;
  TypeScheme type = 2;
}

message Reference {
  string name = 1;
  NameWithType nameWithType = 2;
}

message LiteralInt {
  int32 int = 1;
  NameWithType nameWithType = 2;
}

message LiteralLong {
  int64 long = 1;
  NameWithType nameWithType = 2;
}

message LiteralFloat {
  float flt = 1;
  NameWithType nameWithType = 2;
}

message LiteralDouble {
  double flt = 1;
  NameWithType nameWithType = 2;
}

message LiteralBoolean {
  bool boolean = 1;
  NameWithType nameWithType = 2;
}

message LiteralString {
  string str = 1;
  NameWithType nameWithType = 2;
}

message LiteralChar {
  string char = 1;
  NameWithType nameWithType = 2;
}

message LiteralUnit {
  NameWithType nameWithType = 1;
}

message If {
  Expr cond = 1;
  Expr thenExpr = 2;
  Expr elseExpr = 3;
  NameWithType nameWithType = 4;
}

message Lambda {
  repeated string variable = 1;
  Expr body = 2;
  NameWithType nameWithType = 3;
}

message Apply {
  Expr fn = 1;
  repeated Expr args = 2;
  NameWithType nameWithType = 3;
}

message Expr {
  oneof sealed_value {
    Reference ref = 2;
    LiteralInt int = 3;
    LiteralLong long = 4;
    LiteralFloat flt = 5;
    LiteralDouble dbl = 6; 
    LiteralBoolean boolean = 7;
    LiteralString str = 8;
    LiteralChar char = 9;
    LiteralUnit unit = 10;
    If if = 11;
    Lambda lambda = 12;
    Apply apply = 13;
  }
}

message Let {
  string name = 1;
  Expr binding = 2;
  NameWithType nameWithType = 3;
}

message TopLevelDeclaration {
  oneof sealed_value {
    Let let = 1;
  }
}

message Module {
  repeated string pkg = 1;
  string name = 2;
  repeated Import imports = 3;
  repeated TopLevelDeclaration declarations = 4;
  NameWithType nameWithType = 5;
}